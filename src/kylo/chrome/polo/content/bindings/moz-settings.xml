<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla Mobile Browser.
   -
   - The Initial Developer of the Original Code is
   - Mozilla Corporation.
   - Portions created by the Initial Developer are Copyright (C) 2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Brooks <db48x@yahoo.com>
   -   Mark Finkle <mfinkle@mozilla.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->
<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl"
    [
    <!ENTITY % settingsDTD SYSTEM "chrome://polo/locale/settings.dtd">
    %settingsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="settings">
    <content orient="vertical">
      <xul:label class="settings-title" xbl:inherits="value=label" crop="end"/>
      <children />
    </content>

    <implementation>
      <field name="prefs">
        Components.classes["@mozilla.org/preferences-service;1"]
                  .getService(Components.interfaces.nsIPrefBranch2);
      </field>
    </implementation>
  </binding>

  <binding id="setting-base">
    <implementation>
      <constructor><![CDATA[
        this.preferenceChanged();
        
        if (this.usePref)
          this._prefs.addObserver(this.pref, this._observer, true);
      ]]></constructor>

      <field name="_observer"><![CDATA[({
        _self: this,

        QueryInterface: function(aIID) {
          if (aIID.equals(Components.interfaces.nsIObserver) ||
              aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
              aIID.equals(Components.interfaces.nsISupports))
            return this;

          throw Components.results.NS_ERROR_NO_INTERFACE;
        },

        observe: function(aSubject, aTopic, aPrefName) {
          if (aTopic != "nsPref:changed")
            return;

          if (this._self.pref == aPrefName)
            this._self.preferenceChanged();
        }
      })]]>
      </field>

      <method name="fireEvent">
        <parameter name="eventName"/>
        <parameter name="funcStr"/>
        <body>
          <![CDATA[
            let body = funcStr || this.getAttribute(eventName);
            if (!body)
              return;

            try {
              let event = document.createEvent("Events");
              event.initEvent(eventName, true, true);
              let f = new Function("event", body);
              f.call(this, event);
            }
            catch (e) {
              Components.utils.reportError(e);
            }
          ]]>
        </body>
      </method>

      <method name="valueFromPreference">
        <body>
        <![CDATA[
          // Should be code to set the from the preference input.value
          throw "No valueFromPreference implementation";
        ]]>
        </body>
      </method>

      <method name="valueToPreference">
        <body>
        <![CDATA[
          // Should be code to set the input.value from the preference
          throw "No valueToPreference implementation";
        ]]>
        </body>
      </method>

      <method name="inputChanged">
        <body>
        <![CDATA[
          if (this.usePref && !this._updatingInput) {
            this.valueToPreference();
            this.fireEvent("oninputchanged");
          }
        ]]>
        </body>
      </method>

      <method name="preferenceChanged">
        <body>
        <![CDATA[
          if (this.usePref) {
            this._updatingInput = true;
            try {
              this.valueFromPreference();
              this.fireEvent("onpreferencechanged");
            } catch (e) {}
            this._updatingInput = false;
          }
        ]]>
        </body>
      </method>

      <property name="usePref" readonly="true" onget="return this.hasAttribute('pref');"/>
      <property name="pref" readonly="true" onget="return this.getAttribute('pref');"/>
      <property name="type" readonly="true" onget="return this.getAttribute('type');"/>
      <property name="value" onget="return this.input.value;" onset="return this.input.value = val;"/>

      <field name="_prefs">
        this.settings ?
          this.settings.prefs :
          Components.classes["@mozilla.org/preferences-service;1"]
                    .getService(Components.interfaces.nsIPrefBranch2);
      </field>

      <field name="_updatingInput">false</field>
      <field name="input">document.getAnonymousElementByAttribute(this, "anonid", "input");</field>

      <field name="settings">
        this.parentNode.localName == "settings" ? this.parentNode : null;
      </field>
    </implementation>
  </binding>

  <binding id="setting-bool" extends="chrome://polo/content/bindings/moz-settings.xml#setting-base">
    <content>
      <xul:box flex="1" class="prefbox">
        <xul:vbox flex="1">
          <xul:label class="preftitle" xbl:inherits="value=title" crop="end" flex="1"/>
          <xul:label class="prefdesc" xbl:inherits="value=desc" crop="end" flex="1">
            <children/>
          </xul:label>
        </xul:vbox>
        <xul:hbox anonid="input-container">
          <xul:checkbox anonid="input" xbl:inherits="disabled" oncommand="inputChanged();"/>
        </xul:hbox>
      </xul:box>
    </content>

    <implementation>
      <method name="valueFromPreference">
        <body>
        <![CDATA[
          let val = this._prefs.getBoolPref(this.pref);
          this.value = this.inverted ? !val : val;
         ]]>
        </body>
      </method>

      <method name="valueToPreference">
        <body>
        <![CDATA[
          let val = this.value;
          this._prefs.setBoolPref(this.pref, this.inverted ? !val : val);
        ]]>
        </body>
      </method>

      <property name="value" onget="return this.input.checked;" onset="return this.input.setChecked(val);"/>
      <property name="inverted" readonly="true" onget="return this.getAttribute('inverted');"/>
    </implementation>
  </binding>

  <binding id="setting-boolint" extends="chrome://polo/content/bindings/moz-settings.xml#setting-base">
    <content>
      <xul:box flex="1" class="prefbox">
        <xul:vbox flex="1">
          <xul:label class="preftitle" xbl:inherits="value=title" crop="end" flex="1"/>
          <xul:label class="prefdesc" xbl:inherits="value=desc" crop="end" flex="1">
            <children/>
          </xul:label>
        </xul:vbox>
        <xul:hbox anonid="input-container">
          <xul:checkbox anonid="input" xbl:inherits="disabled" oncommand="inputChanged();"/>
        </xul:hbox>
      </xul:box>
    </content>

    <implementation>
      <method name="valueFromPreference">
        <body>
        <![CDATA[
          let val = this._prefs.getIntPref(this.pref);
          this.value = (val == this.getAttribute("on"));
         ]]>
        </body>
      </method>

      <method name="valueToPreference">
        <body>
        <![CDATA[
          this._prefs.setIntPref(this.pref, this.getAttribute(this.value ? "on" : "off"));
        ]]>
        </body>
      </method>

      <property name="value" onget="return this.input.checked;" onset="return this.input.setChecked(val);"/>
      <property name="inverted" readonly="true" onget="return this.getAttribute('inverted');"/>
    </implementation>
  </binding>

  <binding id="setting-integer" extends="chrome://polo/content/bindings/moz-settings.xml#setting-base">
    <content>
      <xul:box flex="1" class="prefbox">
        <xul:vbox flex="1">
          <xul:label class="preftitle" xbl:inherits="value=title" crop="end" flex="1"/>
          <xul:label class="prefdesc" xbl:inherits="value=desc" crop="end" flex="1">
            <children/>
          </xul:label>
        </xul:vbox>
        <xul:hbox anonid="input-container">
          <xul:textbox type="number" anonid="input" xbl:inherits="disabled,emptytext,min,max,increment,hidespinbuttons,wraparound" oncommand="inputChanged();"/>
        </xul:hbox>
      </xul:box>
    </content>

    <implementation>
      <method name="valueFromPreference">
        <body>
        <![CDATA[
          let val = this._prefs.getIntPref(this.pref);
          this.value = val;
         ]]>
        </body>
      </method>

      <method name="valueToPreference">
        <body>
        <![CDATA[
          this._prefs.setIntPref(this.pref, this.value);
        ]]>
        </body>
      </method>

      <property name="type" readonly="true" onget="return this.getAttribute('type');"/>
      <property name="value" onget="return this.input.value;" onset="return this.input.value = val;"/>
    </implementation>
  </binding>

  <binding id="setting-control" extends="chrome://polo/content/bindings/moz-settings.xml#setting-base">
    <content>
      <xul:box flex="1" class="prefbox">
        <xul:vbox flex="1">
          <xul:label class="preftitle" xbl:inherits="value=title" crop="end" flex="1"/>
          <xul:label class="prefdesc" xbl:inherits="value=desc" crop="end" flex="1">
            <children/>
          </xul:label>
        </xul:vbox>
        <xul:hbox anonid="input-container">
          <children includes="button|menulist"/>
        </xul:hbox>
      </xul:box>
    </content>
  </binding>
  
  <binding id="setting-string" extends="chrome://polo/content/bindings/moz-settings.xml#setting-base">
    <content>
      <xul:box flex="1" class="prefbox">
        <xul:vbox >
          <xul:label class="preftitle" xbl:inherits="value=title" crop="end" flex="1"/>
          <xul:label class="prefdesc" xbl:inherits="value=desc" crop="end" flex="1">
            <children/>
          </xul:label>
        </xul:vbox>
        <xul:hbox anonid="input-container" flex="1">
          <xul:textbox flex="1" xbl:inherits="disabled,emptytext,type=inputtype,min,max,increment,hidespinbuttons,decimalplaces,wraparound,autocompletesearch" anonid="input" oninput="inputChanged();"/>
        </xul:hbox>
      </xul:box>
    </content>

    <implementation>
      <method name="valueFromPreference">
        <body>
        <![CDATA[
          this.value = this._prefs
                           .getComplexValue(this.pref, Components.interfaces.nsISupportsString)
                           .data;
         ]]>
        </body>
      </method>

      <method name="valueToPreference">
        <body>
        <![CDATA[
          let iss = Components.classes["@mozilla.org/supports-string;1"]
                              .createInstance(Components.interfaces.nsISupportsString);
          iss.data = this.value;
          this._prefs
              .setComplexValue(this.pref, Components.interfaces.nsISupportsString, iss);
        ]]>
        </body>
      </method>

      <property name="value" onget="return this.input.value;" onset="return this.input.value=val;"/>
    </implementation>
  </binding>
  
  <!-- Themes -->
  <binding id="theme-item"
           extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">    
    <implementation>
      <constructor><![CDATA[
        this._initWithAddon(this.mAddon);
      ]]></constructor>          
      <field name="_info">
        document.getAnonymousElementByAttribute(this, "anonid", "info");
      </field>
      <field name="_version">
        document.getAnonymousElementByAttribute(this, "anonid", "version");
      </field>
      <field name="_icon">
        document.getAnonymousElementByAttribute(this, "anonid", "icon");
      </field>
      <field name="_description">
        document.getAnonymousElementByAttribute(this, "anonid", "description");
      </field>
      <field name="_enableBtn">
        document.getAnonymousElementByAttribute(this, "anonid", "enable-btn");
      </field>
      <field name="_disableBtn">
        document.getAnonymousElementByAttribute(this, "anonid", "disable-btn");
      </field>
      <field name="_removeBtn">
        document.getAnonymousElementByAttribute(this, "anonid", "remove-btn");
      </field>                   
      
      <property name="userDisabled">
        <getter><![CDATA[
          return this.mAddon.userDisabled;
        ]]></getter>
        <setter><![CDATA[
          this.mAddon.userDisabled = val;
        ]]></setter>
      </property>      
      
      <method name="hasPermission">
        <parameter name="aPerm"/>
        <body><![CDATA[
          var perm = AddonManager["PERM_CAN_" + aPerm.toUpperCase()];
          return !!(this.mAddon.permissions & perm);
        ]]></body>
      </method>

      <method name="uninstall">
        <body><![CDATA[
          this.mAddon.uninstall();
        ]]></body>
      </method>   
      
      <method name="isPending">
        <parameter name="aAction"/>
        <body><![CDATA[
          var action = AddonManager["PENDING_" + aAction.toUpperCase()];
          return !!(this.mAddon.pendingOperations & action);
        ]]></body>
      </method>      
      
      <method name="_initWithAddon">
        <parameter name="aAddon"/>
        <body><![CDATA[
          this.mAddon = aAddon;

          this.setAttribute("name", aAddon.name);

          var iconURL = this.mAddon.iconURL;
          if (iconURL) {
            this._icon.src = iconURL;
          } else {
            this._icon.src = null;
            this._icon.hidden = true;
          }

          var version = this.mAddon.version;
          if (version) {
            this._version.value = version;
          } else {
            this._version.hidden = true;
          }

          if (this.mAddon.description) {
            this._description.value = this.mAddon.description;
          } else {
            this._description.hidden = true;
          }        
          
          this._updateState();
        ]]></body>
      </method>      
      
      <method name="_updateState">
        <body><![CDATA[          
          // Check for pending operations           
          var pending = this.mAddon.pendingOperations;
          if (pending != AddonManager.PENDING_NONE) {
            var pending = null;
            ["enable", "disable", "uninstall"].forEach(function(aOp) {
              if (this.isPending(aOp))
                pending = aOp;
            }, this);

            this.setAttribute("pending", pending);
          } else {
            this.removeAttribute("pending");
          }
            
          if (this.hasPermission("enable")) {
            this._enableBtn.hidden = false;
            let tooltip = i18nStrings_.getString("settings.addons.enableThemeTooltip");
            this._enableBtn.setAttribute("tooltiptext", tooltip);
          } else {
            this._enableBtn.hidden = true;
          }
          
          if (this.hasPermission("disable")) {
            this._disableBtn.hidden = false;
            let tooltip = i18nStrings_.getString("settings.addons.disableThemeTooltip");
            this._disableBtn.setAttribute("tooltiptext", tooltip);
          } else {
            this._disableBtn.hidden = true;
          }          

          if (this.hasPermission("uninstall")) {
            this._removeBtn.hidden = false;
            let tooltip = i18nStrings_.getString("settings.addons.uninstallThemeTooltip");
            if(this.mAddon.isActive) {
                tooltip = i18nStrings_.getString("settings.addons.uninstallThemeTooltipRestart");
            }
            this._removeBtn.setAttribute("tooltiptext", tooltip);
          } else {
            this._removeBtn.hidden = true;
          }

          this.setAttribute("active", this.mAddon.isActive);             
          ]]>
          </body>
      </method>
      
      <method name="onEnabling">
          <body><![CDATA[
              this._updateState();
          ]]></body>
      </method>
      
      <method name="onEnabled">
          <body><![CDATA[
              this._updateState();
          ]]></body>
      </method>
      
      <method name="onDisabling">
          <body><![CDATA[
              this._updateState();
              
              ThemeSettings.promptRestartToApply(this.mAddon);              
          ]]></body>
      </method>
      
      <method name="onDisabled">
          <body><![CDATA[
              this._updateState();
          ]]></body>
      </method>
      
      <method name="onUninstalling">
        <parameter name="aRestartRequired"/>
        <body><![CDATA[
          this._updateState();
          
          if (this.mAddon.isActive) {
            ThemeSettings.promptRestartToApply(this.mAddon);
          }
        ]]></body>
      </method>
      
      <method name="onUninstalled">
          <body><![CDATA[
              this.parentNode.removeChild(this);
          ]]></body>
      </method>
      
      <method name="onOperationCancelled">
          <body><![CDATA[
              this._updateState();
          ]]></body>
      </method>
    </implementation>        
    <content>
      <xul:hbox class="content-container" flex="1">
        <xul:vbox class="icon-container">
          <xul:image anonid="icon" class="icon"/>
        </xul:vbox>
        <xul:vbox class="content-inner-container" flex="1">
          <xul:hbox class="basicinfo-container">
              <xul:hbox class="name-container">
                <xul:label anonid="name" class="name" crop="end" flex="1"
                           xbl:inherits="value=name,tooltiptext=name"/>
                <xul:label anonid="version" class="version"/>
                <xul:spacer flex="5000"/> <!-- Necessary to make the name crop -->
              </xul:hbox>
          </xul:hbox>
          <xul:hbox class="advancedinfo-container">
              <xul:label anonid="description" class="description" crop="end" flex="1"/>
              <xul:spacer flex="5000"/> <!-- Necessary to make the description crop -->
          </xul:hbox>
        </xul:vbox>
        <xul:vbox class="control-container" pack="center" align="center">
            <xul:hbox>                
                <xul:button anonid="enable-btn"  class="addon-control enable"
                            label="&settings.addons.enableAddon.label;"
                            oncommand="document.getBindingParent(this).userDisabled = false;"/>
                <xul:button anonid="disable-btn"  class="addon-control disable"
                            label="&settings.addons.disableAddon.label;"
                            oncommand="document.getBindingParent(this).userDisabled = true;"/>                            
                <xul:button anonid="remove-btn" class="addon-control remove"
                            label="&settings.addons.uninstallAddon.label;"
                            oncommand="document.getBindingParent(this).uninstall();"/>
            </xul:hbox>
        </xul:vbox>
      </xul:hbox>
    </content>
          
  </binding>  
  
  
</bindings>
